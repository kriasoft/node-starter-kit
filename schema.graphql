schema {
  query: Root
  mutation: Mutation
}

# The top-level API
type Root {
  # Fetches an object given its ID
  node(
    # The ID of an object
    id: ID!
  ): Node

  # Fetches objects given their IDs
  nodes(
    # The IDs of objects
    ids: [ID!]!
  ): [Node]!

  # The authenticated user.
  me: User

  # Find user by username or email.
  user(username: String, email: String): User
  users(after: String, first: Int): UserConnection
}

# An object with an ID
interface Node {
  # The id of the object.
  id: ID!
}

# The registered user account.
type User implements Node {
  # The ID of an object
  id: ID!
  username: String
  email: String
  emailVerified: Boolean
  name: String
  picture: Picture
  timeZone: String
  locale: String
  identities: [Identity!]
  createdAt(format: String): String
  updatedAt(format: String): String
  lastLogin(format: String): String
}

type Picture {
  url: String
}

# The OAuth user identity (credentials).
type Identity {
  id: ID!
  provider: IdentityProvider!
  email: String
}

# OAuth identity provider.
enum IdentityProvider {
  Google
  Apple
  Facebook
  GitHub
  LinkedIn
  Microsoft
  Twitter
  Yahoo
  GameCenter
  PlayGames
}

# A connection to a list of items.
type UserConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # A list of edges.
  edges: [UserEdge]
  totalCount: Int!
}

# Information about pagination in a connection.
type PageInfo {
  # When paginating forwards, are there more items?
  hasNextPage: Boolean!

  # When paginating backwards, are there more items?
  hasPreviousPage: Boolean!

  # When paginating backwards, the cursor to continue.
  startCursor: String

  # When paginating forwards, the cursor to continue.
  endCursor: String
}

# An edge in a connection.
type UserEdge {
  # The item at the end of the edge
  node: User

  # A cursor for use in pagination
  cursor: String!
}

type Mutation {
  # Clears authentication session.
  signOut: String

  # Updates the user account.
  updateUser(
    input: UpdateUserInput
    dryRun: Boolean! = false
  ): UpdateUserPayload
}

type UpdateUserPayload {
  user: User
}

input UpdateUserInput {
  id: ID!
  username: String
  email: String
  name: String
  picture: String
  timeZone: String
  locale: String
}
